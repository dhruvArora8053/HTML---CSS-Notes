ðŸ“˜ The Code Magazine

The Basic Language of the Web: HTML

Posted by Laura Jones on Monday, June 21st 2027

All modern websites and web applications are built using three fundamental technologies: HTML, CSS and JavaScript. These are the languages of the web.

In this post, let's focus on HTML. We will learn what HTML is all about, and why you too should learn it.

What is HTML?

HTML stands for HyperText Markup Language. It's a markup language that web developers use to structure and describe the content of a webpage (not a programming language).

HTML consists of elements that describe different types of content: paragraphs, links, headings, images, video, etc. Web browsers understand HTML and render HTML code as websites.

In HTML, each element is made up of 3 parts:

The opening tag
The closing tag
The actual element
You can learn more at the MDN Web Docs.

Why should you learn HTML?

There are countless reasons for learning the fundamental language of the web. Here are 5 of them:

To be able to use the fundamental web dev language
To hand-craft beautiful websites instead of relying on tools like Worpress or Wix
To build web applications
To impress friends
To have fun ðŸ˜ƒ

Hopefully you learned something new here. See you next time!

/* 
.author-img {
  float: left;
  margin-bottom: 20px;
} */
/* and with this what is going to happen is that this image is basically going be taken out of the document flow just like an absolutely positioned element, now the difference here with floats is that then all the other elements will basically float around it */
/* 
.author {
  /* padding-left: 500px; */
  /* how can we fix the fact that the author p element basically starts right at the beginning of container so behind the image? */
  /* so what we can do is float this element itself */
  float: left;
  margin-top: 10px;
  margin-left: 20px;
  /* now the element starts right after the floated image, we could also set it to right here and then it would move all the way to the right side of the container */
} */
/* so here we can very clearly see that the element itself actually does not start right here where text is but it does infact start right behind the image  */

/* so here we could confirm again that this image has been taken completely out of the page's flow, it is as if the image isn't even on the page, it really does not affect the surrounding elements */

/* Goal: to have h1 and nav to float on the same side */
/* h1 {
  float: left;
}

nav {
  float: right;
} */
/* and so now what we can see here is that the header element kind of lost its height so it looks very wierd infact the only reason why it is still visible is because we have some padding here so if we remove the padding then this element would disappear completely so atleast the background color behind it so why is this happening? */
/* Well, the reason is that all of it's child elements which are in this case only two so the header only has two child elements the h1 and the nav and right now all of them are floated this means that it's as if these elements would not even be on the page so as if they had been removed and so now the element basically has no content anymore and so that way it makes sense that it's height is actually zero. So again, the height is now as if it was zero, the only remaining space that is remaining because of the padding.  */
/* So this phenomena is what we call the collapsing elements and when this happens we say that the elements height has collapsed and this again happened because both of it's children are now floated so it's as if they were not on the page anymore */

/* Difference between absolute positioning and floats */
/* It is that floated elements do still have an impact on surrounding elements so text and inline elements will actually wrap around the floated element and so again in this regard floated elements are completely different from absolutely positioned elements which have no impact and are also not impacted by any of the surrounding elements.  */
/* Finally one very important characterstic of floats is that the container element will simply not adjust it's height to the floated element and so this is the exactly reason why in the last example that we just saw, we saw that the container element collapsed it's height. */

/* 48-Clearing Floats: */
/* .clear {
  clear: both;
} */

/* .clearfix::after {
  clear: both;
  content: "";
  display: block;
} */

/* 49-Building a simple float layout */
/* article {
  /* background-color: green; */
  width: 825px;
  float: left;
} */
/* 
aside {
  /* background-color: red; */
  width: 300px;
  float: right;
} */
/* 
footer {
  /* background-color: yellow; */
  clear: both;
} */

/* 50-Box-sizing, Border-Box:- */
/* aside {
  background-color: #f7f7f7;
  border-top: 5px solid #1098ad;
  border-bottom: 5px solid #1098ad;
  padding: 40px 40px;

  /* by adding 40px of padding for left and right is a little big for the container to hold and it is overlapping the article element so to stop that: aside element got shifted down
  totalWidth= articleWidth+paddingLeft+paddingRight
  totalWidth=300px+40px+40px
  totalWidth=380px: according to default behavior(content-box) of box model sizing */
} */

/* To solve this now we use the other way of Box-Sizing */
/* aside {
  box-sizing: border-box;
  /* Given width: 300px
  now it will adjust it's content width according to padding and borders and it will not go over 300px which means paddings and borders width will stay under 300px but it will manipulate the positioning of inner content */
  /* Now totalWidth=220px+40px+40px
  totalWidth=300px: */
  /* Note:- this property does not get inherited through the parent element so always give it to the universal selector */
} */

/* h4 {
  margin-bottom: 30px;
} */

