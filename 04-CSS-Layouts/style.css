* {
  /* border-top: 10px solid #1098ad; */
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* PAGE SECTIONS */
body {
  color: #444;
  font-family: sans-serif;

  border-top: 10px solid #1098ad;
  position: relative;
}

.container {
  width: 1200px;
  /* margin-left: auto;
  margin-right: auto; */
  margin: 0 auto;
}

.main-header {
  background-color: #f7f7f7;
  /* padding: 20px;
  padding-left: 40px;
  padding-right: 40px; */
  padding: 20px 40px;
  margin-bottom: 60px;
  /* height: 80px; */
}

nav {
  font-size: 18px;
  /* text-align: center; */
}

article {
  margin-bottom: 60px;
}

.post-header {
  margin-bottom: 40px;
  /* position: relative; */
}

aside {
  background-color: #f7f7f7;
  border-top: 5px solid #1098ad;
  border-bottom: 5px solid #1098ad;
  padding: 50px 0;
}

/* SMALLER ELEMENTS */
h1,
h2,
h3 {
  color: #1098ad;
}

h1 {
  font-size: 26px;
  text-transform: uppercase;
  font-style: italic;
}

h2 {
  font-size: 40px;
  margin-bottom: 30px;
}

h3 {
  font-size: 30px;
  margin-bottom: 20px;
  margin-top: 40px;
}

h4 {
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
}

p {
  font-size: 22px;
  line-height: 1.5;
  margin-bottom: 15px;
}

ul,
ol {
  margin-left: 50px;
  margin-bottom: 20px;
}

li {
  font-size: 20px;
  margin-bottom: 10px;
  /* display: inline; */
}

li:last-child {
  margin-bottom: 0;
}

/* footer p {
  font-size: 16px;
} */

/* article header p {
  font-style: italic;
} */

#author {
  font-style: italic;
  font-size: 18px;
}

#copyright {
  font-size: 16px;
}

.related-author {
  font-size: 18px;
  font-weight: bold;
}

/* ul {
  list-style: none;
} */

.related {
  list-style: none;
  margin-left: 0;
}

body {
  /* background-color: orangered; */
}

/* .first-li {
  font-weight: bold;
} */

li:first-child {
  font-weight: bold;
}

li:last-child {
  font-style: italic;
}

li:nth-child(even) {
  /* color: red; */
}

/* Misconception: this won't work! */
article p:first-child {
  color: red;
}

/* Styling links */
a:link {
  color: #1098ad;
  text-decoration: none;
}

a:visited {
  /* color: #777; */
  color: #1098ad;
}

a:hover {
  color: orangered;
  font-weight: bold;
  text-decoration: underline orangered;
}

a:active {
  background-color: black;
  font-style: italic;
}
/* LVHA */

.post-img {
  width: 100%;
  height: auto;
}

nav a:link {
  /* background-color: orangered;
  margin: 20px;
  padding: 20px;

  display: block; */

  margin-right: 30px;
  /* margin-top: 10px; */
  display: inline-block;
}

nav a:link:last-child {
  margin-right: 0;
}

button {
  font-size: 22px;
  padding: 20px;
  cursor: pointer;

  position: absolute;
  /* top: 50px;
  left: 50px; */
  bottom: 50px;
  right: 50px;
}

h1::first-letter {
  font-style: normal;
  margin-right: 5px;
}

h3 + p::first-line {
  /* color: red; */
}

h2 {
  /* background-color: orange; */
  position: relative;
}

h2::before {
  content: "TOP";
  background-color: #ffe70e;
  color: #444;
  font-size: 16px;
  font-weight: bold;
  display: inline-block;
  padding: 5px 10px;
  position: absolute;
  top: -10px;
  right: -25px;
}

/* Resolving conflicts */
/* #copyright {
  color: red;
}

.copyright {
  color: blue;
}

.text {
  color: yellow;
}

footer p {
  color: green !important;
} */

/* nav a:link,
nav p {
  font-size: 18px;
} */

/* Using Flexbox */
.main-header {
  /* background-color: red; */
  display: flex;

  /* remove margin-top for nav anchor above */

  align-items: center;
  /* aligned items to center vertically */

  /* pushing nav a links to right */
  justify-content: space-between;
  /* so this will take all the empty space and divide that as a space between them and in case we only have two elements then that means all the reamining space will stay between the botht of the flex items and as a consequence of that each got pushed to the side */
}

.author-box {
  display: flex;
  align-items: center;
  /* justify-content: space-between; */
  margin-bottom: 15px;
}

/* remove margin-bottom from author p element */
.author {
  margin-bottom: 0;
  margin-left: 15px;
}

/* Using flex on aside */
.related-post {
  display: flex;
  align-items: center;
  gap: 20px;
  margin-bottom: 30px;
}

/* removing margin-bottom from the paragraphs */
.related-author {
  margin-bottom: 0;
  font-size: 14px;
  font-weight: normal;
  font-style: italic;
}

.related-link:link {
  font-size: 17px;
  font-weight: bold;
  font-style: normal;

  /* margin-bottom: 5px; */
  /* this property did not work, because anchors are inline element  */
  /* to fix it: */
  display: inline-block;
  margin-bottom: 5px;
}

/* building a flexbox layout */
.row {
  display: flex;
  gap: 75px;
}

aside {
  /* flex-basis: 300px; */
  /* so this didn't work so we need to set flex-shrink to zero and let's use for this flex shorthand: */
  flex: 0 0 300px;
  /* and indeed now we have aside witht width 300px */
}

/* aside= 300px
article= 825px
space between= 75px
total= 1200px
container= 1200px */

article {
  /* flex: 0 0 825px; */
  /* now having to all this math kind of defeats the purpose of using flexbox in the first place and so maybe we just want the aside to be really 300px but then the article maybe we can allow flexbox to automatically figure out it's size so what we usually do in a situation like this is to simply set flex to 1 which will then automatically allow this element to grow as much as it can in the available space:  */
  flex: 1;
  /* so our article now exactly the same as previous with a width 9f 825px */
margin-bottom: 0;
}

.row{
  margin-bottom: 60px;
}

/* Now let's thing why actually this aside grew all the way until the bottom?
Well the reason is that remember how the default vaue for a align-items is stretched so basically if don't define align-items then automatically all the elements will stretch as far as they can and in this case the largest element is aside, so let's fix this: */
.row{
  align-items: flex-start;
  /* now it's back to only occupying vertically the space that is necessary without growing as much as it can */
}